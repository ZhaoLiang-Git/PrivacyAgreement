//apply plugin: 'com.android.library'
plugins {
    id 'com.android.library'
    //引入插件
    id 'maven-publish'
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    buildscript
    {
        repositories
        {
            jcenter()
            mavenCentral()
            maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
            maven { url 'https://maven.google.com' } // necessary for Android API 26
        }
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        //multiDexEnabled true
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

}

dependencies {
    compileOnly fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    //implementation 'com.github.smarxpan:NotchScreenTool:0.0.1'//国内屏幕适配包
    implementation 'com.github.gzu-liyujiang:Android_CN_OAID:4.2.4'
}

//将源码打包
task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}
//发布maven库

afterEvaluate {
    publishing {
        //配置maven-publishing插件的输出物
        publications {
            maven(MavenPublication) {
                // 依赖 bundleReleaseAar 任务，并上传其产出的aar
                // 方式一：生成aar包
                //afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                // 方式二：指定生成的aar路径
                //发布仓库的文件路径
                groupId = 'com.github.ZhaoLiang-Git'
                //库名
                artifactId = 'PrivacyAgreement'
                //版本号
                version = '1.0.0'
                //指定打包路径
                artifact "$buildDir/outputs/aar/${project.name}-release.aar"


                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        println 'it.name='+it.name+"  it.group="+it.group
                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                            println 'it.name='+it.name
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (it.group == groupId && project.getRootProject().aarMap.contains(it.name)) {
                                dependencyNode.appendNode('type', 'aar')
                            }

                        }
                    }
                }
            }
        }
    }
}

