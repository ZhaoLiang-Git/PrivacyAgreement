<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 3.5.0">

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                return manufacturer.toLowerCase();"
        errorLine2="                                    ~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\notchlib\utils\RomUtils.java"
            line="127"
            column="37"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                return brand.toLowerCase();"
        errorLine2="                             ~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\notchlib\utils\RomUtils.java"
            line="137"
            column="30"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    ret = display.toLowerCase();"
        errorLine2="                                  ~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\notchlib\utils\RomUtils.java"
            line="152"
            column="35"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            ip = String.format(&quot;%d.%d.%d.%d&quot;, (ipAddress &amp; 0xff), (ipAddress >> 8 &amp; 0xff), (ipAddress >> 16 &amp; 0xff), (ipAddress >> 24 &amp; 0xff));"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\Tool\UnityTool.java"
            line="201"
            column="18"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                                return delim &lt; 0 ? sAddr.toUpperCase() : sAddr.substring(0, delim).toUpperCase();"
        errorLine2="                                                         ~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\Tool\UnityTool.java"
            line="225"
            column="58"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                                return delim &lt; 0 ? sAddr.toUpperCase() : sAddr.substring(0, delim).toUpperCase();"
        errorLine2="                                                                                                   ~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\Tool\UnityTool.java"
            line="225"
            column="100"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:&#xA;https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        url="https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        urls="https://developer.android.com/distribute/best-practices/develop/target-sdk.html,http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 29"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\build.gradle"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on devices from other vendors, and it may suddenly stop working (if the API is removed) or crash spectacularly (if the API behavior changes, since there are no guarantees for compatibility)."
        url="https://developer.android.com/preview/restrictions-non-sdk-interfaces"
        urls="https://developer.android.com/preview/restrictions-non-sdk-interfaces"
        errorLine1="            Method getInt = Class.forName(&quot;android.os.SystemProperties&quot;).getMethod(&quot;getInt&quot;, String.class, int.class);"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\notchlib\impl\MiNotchScreen.java"
            line="20"
            column="29"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on devices from other vendors, and it may suddenly stop working (if the API is removed) or crash spectacularly (if the API behavior changes, since there are no guarantees for compatibility)."
        url="https://developer.android.com/preview/restrictions-non-sdk-interfaces"
        urls="https://developer.android.com/preview/restrictions-non-sdk-interfaces"
        errorLine1="            cls = Class.forName(&quot;android.os.SystemProperties&quot;);"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\notchlib\impl\OppoNotchScreen.java"
            line="34"
            column="19"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on devices from other vendors, and it may suddenly stop working (if the API is removed) or crash spectacularly (if the API behavior changes, since there are no guarantees for compatibility)."
        url="https://developer.android.com/preview/restrictions-non-sdk-interfaces"
        urls="https://developer.android.com/preview/restrictions-non-sdk-interfaces"
        errorLine1="            Class&lt;?> cls = Class.forName(&quot;android.util.FtFeature&quot;);"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\notchlib\impl\VivoNotchScreen.java"
            line="25"
            column="28"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `networkSecurityConfig` is only used in API level 24 and higher (current min is 19)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    &lt;application android:usesCleartextTraffic=&quot;true&quot; android:networkSecurityConfig=&quot;@xml/network_security_config&quot; android:largeHeap=&quot;true&quot;"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\AndroidManifest.xml"
            line="12"
            column="54"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `usesCleartextTraffic` is only used in API level 23 and higher (current min is 19)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    &lt;application android:usesCleartextTraffic=&quot;true&quot; android:networkSecurityConfig=&quot;@xml/network_security_config&quot; android:largeHeap=&quot;true&quot;"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\AndroidManifest.xml"
            line="12"
            column="18"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="Old buildToolsVersion 29.0.2; recommended version is 29.0.3 or later"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    buildToolsVersion &quot;29.0.2&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\build.gradle"
            line="13"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.appcompat:appcompat than 1.1.0 is available: 1.6.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;androidx.appcompat:appcompat:1.1.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\build.gradle"
            line="52"
            column="5"/>
    </issue>

    <issue
        id="HardwareIds"
        severity="Warning"
        message="Using `getMacAddress` to get device identifiers is not recommended."
        category="Security"
        priority="6"
        summary="Hardware Id Usage"
        explanation="Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use `AdvertisingIdClient$Info#getId` and for analytics, use `InstanceId#getId`."
        url="https://developer.android.com/training/articles/user-data-ids.html"
        urls="https://developer.android.com/training/articles/user-data-ids.html"
        errorLine1="        if (wi == null || wi.getMacAddress() == null) {"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\Tool\UnityTool.java"
            line="181"
            column="27"/>
    </issue>

    <issue
        id="HardwareIds"
        severity="Warning"
        message="Using `getMacAddress` to get device identifiers is not recommended."
        category="Security"
        priority="6"
        summary="Hardware Id Usage"
        explanation="Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use `AdvertisingIdClient$Info#getId` and for analytics, use `InstanceId#getId`."
        url="https://developer.android.com/training/articles/user-data-ids.html"
        urls="https://developer.android.com/training/articles/user-data-ids.html"
        errorLine1="        if (&quot;02:00:00:00:00:00&quot;.equals(wi.getMacAddress().trim())) {"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\Tool\UnityTool.java"
            line="184"
            column="40"/>
    </issue>

    <issue
        id="HardwareIds"
        severity="Warning"
        message="Using `getMacAddress` to get device identifiers is not recommended."
        category="Security"
        priority="6"
        summary="Hardware Id Usage"
        explanation="Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use `AdvertisingIdClient$Info#getId` and for analytics, use `InstanceId#getId`."
        url="https://developer.android.com/training/articles/user-data-ids.html"
        urls="https://developer.android.com/training/articles/user-data-ids.html"
        errorLine1="            return wi.getMacAddress().trim();"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\Tool\UnityTool.java"
            line="187"
            column="20"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into your application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="        webSettings.setJavaScriptEnabled(true);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\PrivacyAgreementWebViewActivity.java"
            line="67"
            column="9"/>
    </issue>

    <issue
        id="InsecureBaseConfiguration"
        severity="Warning"
        message="Setting `cleartextTrafficPermitted` to `&quot;true&quot;` by default is not recommended"
        category="Security"
        priority="5"
        summary="Setting `cleartextTrafficPermitted` to `&quot;true&quot;` by default is not recommended"
        explanation="Permitting cleartext traffic could allow eavesdroppers to intercept data sent by your app, which impacts the privacy of your users. Consider only allowing encrypted traffic by setting the `cleartextTrafficPermitted` tag to `&quot;false&quot;`."
        url="https://developer.android.com/preview/features/security-config.html"
        urls="https://developer.android.com/preview/features/security-config.html"
        errorLine1="    &lt;base-config cleartextTrafficPermitted=&quot;true&quot;>"
        errorLine2="                                            ~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\xml\network_security_config.xml"
            line="3"
            column="45"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 19"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT >= 17)"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\notchlib\utils\ScreenUtil.java"
            line="80"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static Context mContext;"
        errorLine2="           ~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\MainActivity.java"
            line="23"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static Activity mActivity;"
        errorLine2="           ~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\MainActivity.java"
            line="24"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static Activity mActivity;"
        errorLine2="           ~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\PrivacyAgreementActivityNew.java"
            line="30"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static Context unityContext;"
        errorLine2="           ~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\UAMain.java"
            line="19"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static Activity unityActivity;"
        errorLine2="           ~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\UAMain.java"
            line="20"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `UnityPlayer` which has field `currentActivity` pointing to `Activity`); this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static UnityPlayer unityPlayer;"
        errorLine2="           ~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\java\com\gyyx\androidsdk\UAMain.java"
            line="22"
            column="12"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `RelativeLayout` layout or its `LinearLayout` parent is useless; transfer the `background` attribute to the other view"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;RelativeLayout"
        errorLine2="     ~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="9"
            column="6"/>
    </issue>

    <issue
        id="TypographyDashes"
        severity="Warning"
        message="Replace &quot;-&quot; with an &quot;en dash&quot; character (–, &amp;#8211;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Hyphen can be replaced with dash"
        explanation="The &quot;n dash&quot; (–, &amp;#8211;) and the &quot;m dash&quot; (—, &amp;#8212;) characters are used for ranges (n dash) and breaks (m dash). Using these instead of plain hyphens can make text easier to read and your application will look more polished."
        url="http://en.wikipedia.org/wiki/Dash"
        urls="http://en.wikipedia.org/wiki/Dash"
        errorLine1="    &lt;string name=&quot;gyyx_inputAccounts&quot;>请输入账号(5-12位数字或字母)&lt;/string>"
        errorLine2="                                      ^">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\values\strings.xml"
            line="24"
            column="39"/>
    </issue>

    <issue
        id="TypographyDashes"
        severity="Warning"
        message="Replace &quot;-&quot; with an &quot;en dash&quot; character (–, &amp;#8211;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Hyphen can be replaced with dash"
        explanation="The &quot;n dash&quot; (–, &amp;#8211;) and the &quot;m dash&quot; (—, &amp;#8212;) characters are used for ranges (n dash) and breaks (m dash). Using these instead of plain hyphens can make text easier to read and your application will look more polished."
        url="http://en.wikipedia.org/wiki/Dash"
        urls="http://en.wikipedia.org/wiki/Dash"
        errorLine1="    &lt;string name=&quot;gyyx_inputPassword&quot;>请输入密码(5-12位数字或字母)&lt;/string>"
        errorLine2="                                      ^">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\values\strings.xml"
            line="25"
            column="39"/>
    </issue>

    <issue
        id="TypographyDashes"
        severity="Warning"
        message="Replace &quot;-&quot; with an &quot;en dash&quot; character (–, &amp;#8211;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Hyphen can be replaced with dash"
        explanation="The &quot;n dash&quot; (–, &amp;#8211;) and the &quot;m dash&quot; (—, &amp;#8212;) characters are used for ranges (n dash) and breaks (m dash). Using these instead of plain hyphens can make text easier to read and your application will look more polished."
        url="http://en.wikipedia.org/wiki/Dash"
        urls="http://en.wikipedia.org/wiki/Dash"
        errorLine1="    &lt;string name=&quot;gyyx_inputOKPassword&quot;>确认密码(5-12位数字或字母)&lt;/string>"
        errorLine2="                                        ^">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\values\strings.xml"
            line="26"
            column="41"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="         ~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="18"
            column="10"/>
    </issue>

    <issue
        id="KeyboardInaccessibleWidget"
        severity="Warning"
        message="&apos;clickable&apos; attribute found, please also add &apos;focusable&apos;"
        category="Accessibility"
        priority="3"
        summary="Keyboard inaccessible widget"
        explanation="A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the `focusable` attribute as well."
        errorLine1="        android:clickable=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;用户协议与隐私政策&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;用户协议与隐私政策&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout.xml"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;不同意&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;不同意&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout.xml"
            line="51"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;同意并继续&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;同意并继续&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout.xml"
            line="65"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;用户协议与隐私政策&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;用户协议与隐私政策&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;不同意&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;不同意&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="85"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;同意并继续                          &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;同意并继续                          &quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="99"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Redundant attribute `layout_alignParentLeft`; already defining `layout_alignParentStart` with `targetSdkVersion` 29"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_activity_agree_content.xml"
            line="19"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toLeftOf` with `android:layout_toStartOf=&quot;@+id/view_2&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toLeftOf=&quot;@+id/view_2&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout.xml"
            line="54"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginRight` with `android:layout_marginEnd=&quot;50dp&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginRight=&quot;50dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout.xml"
            line="55"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@+id/view_2&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@+id/view_2&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout.xml"
            line="68"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;50dp&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;50dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout.xml"
            line="69"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toLeftOf` with `android:layout_toStartOf=&quot;@+id/view_2new&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_toLeftOf=&quot;@+id/view_2new&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="88"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginRight` with `android:layout_marginEnd=&quot;50dp&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;50dp&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="89"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@+id/view_2new&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_toRightOf=&quot;@+id/view_2new&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="102"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;50dp&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginLeft=&quot;50dp&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\A-GitProject\PrivacyAgreementTool\GY_SDK_UnityWebViewPrivacyAgreementXXG\AndroidSdk\gyyxsdk\src\main\res\layout\privacy_agreement_layout_new.xml"
            line="103"
            column="13"/>
    </issue>

</issues>
